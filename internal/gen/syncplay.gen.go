// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateRoom defines model for CreateRoom.
type CreateRoom struct {
	RoomId openapi_types.UUID `json:"room_id"`
}

// GetInfo defines model for GetInfo.
type GetInfo struct {
	Version string `json:"version"`
}

// ErrorResponse Ответ с информацией об ошибке
type ErrorResponse struct {
	// Detail Информация об ошибке
	Detail string `json:"detail"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v1/info)
	GetInfo(ctx echo.Context) error

	// (POST /api/v1/rooms)
	CreateRoom(ctx echo.Context) error

	// (DELETE /api/v1/rooms/{id})
	DeleteRoom(ctx echo.Context, id openapi_types.UUID) error

	// (GET /api/v1/ws/{id})
	ConnectRoomWS(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInfo(ctx)
	return err
}

// CreateRoom converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRoom(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRoom(ctx)
	return err
}

// DeleteRoom converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRoom(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRoom(ctx, id)
	return err
}

// ConnectRoomWS converts echo context to params.
func (w *ServerInterfaceWrapper) ConnectRoomWS(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConnectRoomWS(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/info", wrapper.GetInfo)
	router.POST(baseURL+"/api/v1/rooms", wrapper.CreateRoom)
	router.DELETE(baseURL+"/api/v1/rooms/:id", wrapper.DeleteRoom)
	router.GET(baseURL+"/api/v1/ws/:id", wrapper.ConnectRoomWS)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9SVz24rNRTGX2VkWM7NJHDZzA64gCIkqG501UUVVe7MaeoyY09tp6WqIiUpAiQWFRIL",
	"ViDUF0jTRoSmnWc4foU+CbInaf7MqGygKqs4sv199s/fOXNGIpFmggPXioRnREUHkFI3/FQC1fBWiNT+",
	"y6TIQGoGbk4Kke6y2A73hUypJiHpdllMfKJPMyAhUVoy3iG9nk8kHHWZhJiEO48b2z7RTCd25YrP426x",
	"dwiRJj2ffAG6yfdF+QjHIBUT3A6ftlwsXLFciFb4gZRC7kpQmeAKrHoMKpIs086M4G9miGOcmKFnBh5O",
	"8d58h7np4x2OzPc4xQn+5WGOVx7m5kec4hXe4oT4G6ePQVOWVMj/uiloLirlnr7zXL5duqBdyOY8FzRa",
	"pzzaSuip9/FWk/hLsKReq9caForIgNOMkZB8WKvX6vY2VB+4iwQ0Y8FxI1iIdkBX3Op3zHFmzs0POMF7",
	"C8lzDPtmgFOcemZg/+AYp2aAI+IMJbWbm/Hacy3exVl/UK/bn0hwDdy50ixLWOQ2BoeqCEeRaDt6X8I+",
	"Ccl7wTLywTzvwcLCAVo//NdfWgQf/YtmGxmr8GxyDZLTxGuBPAbpfWZ32IU9/5G4LSXHIROqivkfmOOf",
	"eIOjBfFbzPEO73FkhuanEuS1MvzPOK+4/N9QB2cs7hWcE9BVreHS0Z4tM/408TdOZ048o5KmoEEqEu5s",
	"Kr9713xTVmN2yhYi8QmnqS1l14GXjUDLLvgrpP6pV7dLL/+6fM3ikV4XU8/0SF8J/bno8vhlxuNkmY3q",
	"9ndpBmboCjHH8UpAtmGvJaJvQD/0fzYDzHGCN/aTUiywnf8GZ+bCc23y2j49ztz8NY48HK9Fwn0VNkpa",
	"cA6Rtgnbbr3UjDXqjTKx1gnT0QHjHW9LCi0ikSjvof/LEphXxoUTz5xXgM6LuD5naD6h8Vs46oLSLyew",
	"Pvn21QnsKYfvVQpK0Q4UQZgb1morjjV7rsojKNbhNNmdK5Be2x1CObdCrysTEpLATv0dAAD//zERujtg",
	"CgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
