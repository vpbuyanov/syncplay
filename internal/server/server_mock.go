// Code generated by MockGen. DO NOT EDIT.
// Source: server.go
//
// Generated by this command:
//
//	mockgen -source=server.go -destination server_mock.go -package server SERVER
//
// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	types "github.com/oapi-codegen/runtime/types"
	gomock "go.uber.org/mock/gomock"
)

// MockmodelRoom is a mock of modelRoom interface.
type MockmodelRoom struct {
	ctrl     *gomock.Controller
	recorder *MockmodelRoomMockRecorder
}

// MockmodelRoomMockRecorder is the mock recorder for MockmodelRoom.
type MockmodelRoomMockRecorder struct {
	mock *MockmodelRoom
}

// NewMockmodelRoom creates a new mock instance.
func NewMockmodelRoom(ctrl *gomock.Controller) *MockmodelRoom {
	mock := &MockmodelRoom{ctrl: ctrl}
	mock.recorder = &MockmodelRoomMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmodelRoom) EXPECT() *MockmodelRoomMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method.
func (m *MockmodelRoom) CreateRoom(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockmodelRoomMockRecorder) CreateRoom(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockmodelRoom)(nil).CreateRoom), ctx)
}

// DeleteRoom mocks base method.
func (m *MockmodelRoom) DeleteRoom(ctx context.Context, id types.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoom indicates an expected call of DeleteRoom.
func (mr *MockmodelRoomMockRecorder) DeleteRoom(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockmodelRoom)(nil).DeleteRoom), ctx, id)
}

// RoomExistsUUID mocks base method.
func (m *MockmodelRoom) RoomExistsUUID(ctx context.Context, roomID types.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoomExistsUUID", ctx, roomID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoomExistsUUID indicates an expected call of RoomExistsUUID.
func (mr *MockmodelRoomMockRecorder) RoomExistsUUID(ctx, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoomExistsUUID", reflect.TypeOf((*MockmodelRoom)(nil).RoomExistsUUID), ctx, roomID)
}
