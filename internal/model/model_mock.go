// Code generated by MockGen. DO NOT EDIT.
// Source: model.go
//
// Generated by this command:
//
//	mockgen -source=model.go -destination model_mock.go -package model MODEL
//
// Package model is a generated GoMock package.
package model

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockstorePG is a mock of storePG interface.
type MockstorePG struct {
	ctrl     *gomock.Controller
	recorder *MockstorePGMockRecorder
}

// MockstorePGMockRecorder is the mock recorder for MockstorePG.
type MockstorePGMockRecorder struct {
	mock *MockstorePG
}

// NewMockstorePG creates a new mock instance.
func NewMockstorePG(ctrl *gomock.Controller) *MockstorePG {
	mock := &MockstorePG{ctrl: ctrl}
	mock.recorder = &MockstorePGMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstorePG) EXPECT() *MockstorePGMockRecorder {
	return m.recorder
}

// CreateRoomById mocks base method.
func (m *MockstorePG) CreateRoomById(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoomById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoomById indicates an expected call of CreateRoomById.
func (mr *MockstorePGMockRecorder) CreateRoomById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoomById", reflect.TypeOf((*MockstorePG)(nil).CreateRoomById), ctx, id)
}

// DeleteRoomById mocks base method.
func (m *MockstorePG) DeleteRoomById(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoomById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoomById indicates an expected call of DeleteRoomById.
func (mr *MockstorePGMockRecorder) DeleteRoomById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoomById", reflect.TypeOf((*MockstorePG)(nil).DeleteRoomById), ctx, id)
}

// RoomExists mocks base method.
func (m *MockstorePG) RoomExists(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoomExists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoomExists indicates an expected call of RoomExists.
func (mr *MockstorePGMockRecorder) RoomExists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoomExists", reflect.TypeOf((*MockstorePG)(nil).RoomExists), ctx, id)
}
