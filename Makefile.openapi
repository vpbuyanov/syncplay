# Ссылка на последнюю версию Swagger Codegen CLI
SWAGGER_URL := https://repo1.maven.org/maven2/io/swagger/codegen/v3/swagger-codegen-cli/3.0.52/swagger-codegen-cli-3.0.52.jar
SWAGGER := swagger-codegen-cli.jar

# Путь к спецификации и артефактам
SCHEMA       := schema/syncplay.json
MERGED_SPEC  := schema/merged.json
GEN_DIR      := internal/gen
GEN_FILE     := $(GEN_DIR)/syncplay.gen.go

.PHONY: gen merge code clean

# Скачать swagger-codegen-cli.jar, если его нет
$(SWAGGER):
	@echo "➔ Проверка swagger-codegen-cli.jar…"
	@test -f $(SWAGGER) || ( \
		echo "➔ Качаем свежий swagger-codegen-cli.jar…" && \
		curl -sSL $(SWAGGER_URL) -o $(SWAGGER) && \
		echo "✔ swagger-codegen-cli.jar загружен" \
	)

# Объединить OpenAPI-фрагменты
merge: $(SWAGGER)
	@echo "➔ Сливаем OpenAPI spec для 'syncplay'…"
	@java -jar $(SWAGGER) generate \
	  -l openapi \
	  -i $(SCHEMA) \
	  -o schema \
	  -DoutputFile=$(notdir $(MERGED_SPEC))
	@echo "✔ merged spec: $(MERGED_SPEC)"

# Сгенерировать Go-код
code:
	@echo "➔ Генерируем Go-код…"
	@mkdir -p $(GEN_DIR)
	@oapi-codegen \
	  --package=gen \
	  --generate types,server,spec \
	  $(MERGED_SPEC) > $(GEN_FILE)
	@echo "✔ generated code: $(GEN_FILE)"

# Удалить промежуточные файлы
clean:
	@echo "➔ Очищаем промежуточные файлы…"
	@rm -rf \
	  schema/.swagger-codegen \
	  schema/README.md \
	  schema/.swagger-codegen-ignore
	@echo "✔ clean complete"

# Полный цикл: merge → code → clean
gen: merge code clean
